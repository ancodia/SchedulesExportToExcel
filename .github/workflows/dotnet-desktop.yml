name: Build DLLs

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration:
          - 'Release-2025'
          - 'Release-2024'
          - 'Release-2023'
          - 'Release-2022'
          - 'Release-2021'
          - 'Release-2020'

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: SchedulesExcelExport.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src/SchedulesExcelExport.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      #Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      #Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set .NET version
      id: set_dotnet_version
      shell: pwsh
      run: |
        $config = "${{ matrix.configuration }}"
        if ($config -eq 'Release-2025') {
          $dotnet_version = '7.x'
        } elseif ($config -in @('Release-2024', 'Release-2023', 'Release-2022', 'Release-2021')) {
          $dotnet_version = '4.8.0'
        } elseif ($config -eq 'Release-2020') {
          $dotnet_version = '4.7.2'
        }
        echo "dotnet_version=$dotnet_version" >> $GITHUB_ENV

    # Install the .NET Core workload  
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet_version }}

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Build Project
      run: dotnet build --configuration ${{ matrix.configuration }}

    - name: Restore dependencies
      run: dotnet restore --configuration ${{ matrix.configuration }} --verbosity minimal

    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore --verbosity minimal

    - name: Log All Properties
      run: dotnet msbuild -target:LogAllProperties

    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: output-${{ matrix.configuration }}
        path: ./output/${{ matrix.configuration }}
